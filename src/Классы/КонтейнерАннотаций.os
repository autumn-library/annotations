#Использовать reflector

// Соответствие, в котором хранятся все определения аннотаций.
//  * Ключ - Строка - имя аннотации.
//  * Значение - ОпределениеАннотации - определение аннотации.
Перем ОпределенияАннотаций;

// РазворачивательАннотаций - объект, который разворачивает мета-аннотации в плоский список.
Перем РазворачивательАннотаций;

// Получить все определения аннотаций.
//
//  Возвращаемое значение:
//   ФиксированноеСоответствие - Соответствие, в котором хранятся все определения аннотаций:
//	   * Ключ - Строка - имя аннотации.
//	   * Значение - ОпределениеАннотации - определение аннотации.
//
Функция ПолучитьОпределенияАннотаций() Экспорт
	Возврат Новый ФиксированноеСоответствие(ОпределенияАннотаций);
КонецФункции

// Получить определение аннотации по её имени.
//
// Параметры:
//   Имя - Строка - Имя аннотации.
//
//  Возвращаемое значение:
//   ОпределениеАннотации, Неопределено - Найденное определение аннотаций. 
//                                        Неопределено, если аннотация с данным именем не зарегистрирована.
//
Функция ПолучитьОпределениеАннотации(Имя) Экспорт
	Возврат ОпределенияАннотаций.Получить(НРег(Имя));
КонецФункции

// Получить настроенный разворачиватель аннотаций.
//
//  Возвращаемое значение:
//   РазворачивательАннотаций - Разворачиватель аннотаций, связанный с данным контейнером аннотаций.
//
Функция ПолучитьРазворачивательАннотаций() Экспорт
	Возврат РазворачивательАннотаций;
КонецФункции

// Добавить аннотацию в контейнер аннотаций.
//
// Параметры:
//   ТипАннотации - Тип - Тип аннотации.
//
//  Возвращаемое значение:
//   ОпределениеАннотации - Определение добавленной аннотации.
//
Функция ДобавитьАннотацию(ТипАннотации) Экспорт
	
	ИмяТипаАннотации = Строка(ТипАннотации);

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипАннотации);
	Методы = РефлекторОбъекта.ПолучитьТаблицуМетодов("Аннотация", Ложь);
	Ожидаем.Что(
		Методы.Количество(),
		"Класс должен иметь ровно один метод с аннотацией &Аннотация"
	).Равно(1);

	Конструктор = Методы[0];
	ОсновнаяАннотация = РаботаСАннотациями.ПолучитьАннотацию(Конструктор, "Аннотация");
	
	ИмяАннотации = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(ОсновнаяАннотация, , ИмяТипаАннотации);

	Параметры = Конструктор.Параметры;
	КоличествоПараметровСИменемПоУмолчанию = 0;
	Для Каждого Параметр Из Параметры Цикл
		Если ВРег(Параметр.Имя) = ВРег("Значение") Тогда
			КоличествоПараметровСИменемПоУмолчанию = КоличествоПараметровСИменемПоУмолчанию + 1;

			Если КоличествоПараметровСИменемПоУмолчанию > 1 Тогда
				ВызватьИсключение СтрШаблон(
					"Аннотация %1 имеет более одного параметра с именем ""Значение""",
					ИмяАннотации
				);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Аннотации = Конструктор.Аннотации;

	Для Каждого ВложеннаяАннотация Из Конструктор.Аннотации Цикл
		
		ОпределениеВложеннойАннотации = ОпределенияАннотаций.Получить(ВложеннаяАннотация.Имя);
		Если ОпределениеВложеннойАннотации = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ОпределениеВложеннойАннотации.Проверить(ВложеннаяАннотация, ИмяАннотации);

	КонецЦикла;

	ОпределениеАннотации = Новый ОпределениеАннотации(ИмяАннотации, ИмяТипаАннотации, Параметры, Аннотации);

	ОпределенияАннотаций.Вставить(НРег(ИмяАннотации), ОпределениеАннотации);

	Возврат ОпределениеАннотации;

КонецФункции

// Контейнер аннотаций - объект, который хранит все определения аннотаций.
// При создании контейнера аннотаций в него автоматически добавляется базовая аннотация &Аннотация.
//
Процедура ПриСозданииОбъекта()

	ОпределенияАннотаций = Новый Соответствие();
	РазворачивательАннотаций = Новый РазворачивательАннотаций(ЭтотОбъект);

	ДобавитьАннотацию(Тип("АннотацияАннотация"));

КонецПроцедуры
